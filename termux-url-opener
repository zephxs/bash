#!/bin/bash
### to be placed in user path ~/bin/ and chmod +x

### REQUIREMENTS
# Define your destination paths here :
_VIDEOS='/data/data/com.termux/files/home/storage/shared/youtube/%(title)s.%(ext)s'
_ABOOKS='/data/data/com.termux/files/home/storage/shared/Music/6-audiobooks/%(title)s.%(ext)s'
_ZIKS='/data/data/com.termux/files/home/storage/shared/Music/5-Newz/%(title)s.%(ext)s'

### AUTO INSTALLER
# required pip for easy install and update
type pip >/dev/null || ( echo "... Installing pip" && pkg install python3; )
# install yt-dlp and update if bin older than 15 days
find $(which yt-dlp) -mtime +15 -exec python3 -m pip install -U yt-dlp \; || python3 -m pip install -U yt-dlp
# install screen for backgrounding - can be removed with occurences if not needed
type screen >/dev/null || ( echo "... Installing screen" && pkg install screen; )

### FUNCTIONS
_MYECHO () { 
_DOTNUM=20;
if [ -z "$1" ]; then echo "<!> need argument"; return 1; fi
_CHAINL=$(echo $@ | wc -c)
_DOTL=$((_DOTNUM - _CHAINL))
i=0
echo -e "$@\c"
while [ "$i" -lt "$_DOTL" ]; do echo -e ".\c"; i=$((i+1)); done
return 0
}
# Colors
_REZ="\e[0m"
_RDX="\e[1;31m"
_BLX="\e[1;34m"
_GRX="\e[1;32m"
_MVX="\e[1;95m"
_BLU () { echo -e "${_BLX}${@}${_REZ}" ; }
_RED () { echo -e "${_RDX}${@}${_REZ}" ; }
_GRN () { echo -e "${_GRX}${@}${_REZ}" ; }
_MAV () { echo -e "${_MVX}${@}${_REZ}" ; }
_OK () { echo -e "[${_GRX}OK${_REZ}${@}]" ; }
_KO () { echo -e "[${_RDX}KO${_REZ}${@}]" ; }


# 1st arg will be used as youtube url
clear
_URL=$1
grep -q "^http.*" <<< ${_URL} || exit 1
_MAV "######################################"
_MAV "########### Youtube-DL v2.4 ##########"
_MAV "######################################"
_MAV "### url : ${_URL}"
_BLU "# Press : "
_MYECHO "[1] " && echo ' for Video (best format)'
_MYECHO "[2] " && echo ' for Video (select format)'
_MYECHO "[3] " && echo ' for Video (select name)'
_MYECHO "[4] " && echo ' for Audiobooks'
_MYECHO "[Enter] " && echo ' for Music'
_MYECHO "[q] " && echo ' to quit'
echo

# function to select format of video file to DL
_FORMATSELECT (){
yt-dlp --list-formats $_URL
echo
_BLU "# Select Available Video Format:"
local IFS="
"
select _FORMATIDLINE in $(yt-dlp --list-formats $_URL |egrep -v "^ID|------|only|^\[|image"|awk -F'|' '{print $1" "$2}'); do
  _FORMATID=$(awk '{print $1}' <<<$_FORMATIDLINE)
  _GRN "# Format = $_FORMATID"
  break
done
}

### MAIN
read -s -n 1 -r
while true; do
case "$REPLY" in
 1) _BLU "######################################"
  _BLU '# Video - Downloading..'
  screen yt-dlp --restrict-filenames -o "${_VIDEOS}" ${_URL}
  break
  ;;
 2) _BLU "######################################"
  _BLU '# Video - Detecting Format..'
  _FORMATSELECT
  [ -z "$_FORMATID"] && ( _RED "> wrong format.." && continue; )
  screen yt-dlp --restrict-filenames -f ${_FORMATID} -o "${_VIDEOS}" ${_URL}
  break
  ;;
 3) _BLU "######################################"
  _BLU '# Video - Choose Name..'
  read -p "Filename: " _ONAME
  _OVIDEOS="/data/data/com.termux/files/home/storage/shared/youtube/${_ONAME}.%(ext)s"
  _FORMATSELECT
  screen yt-dlp --restrict-filenames -f ${_FORMATID} -o "${_OVIDEOS}" ${_URL}
  break
  ;;
 4) _BLU "######################################"
  _BLU '# AudioBook - Downloading..'
  screen yt-dlp --restrict-filenames -x --audio-format mp3 -o "${_ABOOKS}" ${_URL}
  break
  ;;
 q) _BLU "######################################"
  _RED '..Exiting'
  exit
  ;;
 *) _BLU "######################################"
  _BLU '# MP3 - Downloading..'
  screen -S music yt-dlp --restrict-filenames -x --audio-format mp3 -o "${_ZIKS}" ${_URL}
  break
  ;;
esac
done

